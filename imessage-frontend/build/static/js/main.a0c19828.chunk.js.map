{"version":3,"sources":["features/userSlice.js","Message.js","firebase.js","features/chatSlice.js","Chat.js","SidebarChat.js","Sidebar.js","Imessage.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","Message","forwardRef","ref","id","contents","timestamp","photo","displayName","uid","email","message","useSelector","useState","className","Avatar","src","moment","Date","toDate","fromNow","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","chatSlice","chatId","chatName","setChat","selectChatId","chat","selectChatName","Chat","input","setInput","messages","setMessages","emojiSwitch","setEmojiSwitch","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","key","value","onChange","e","target","placeholder","type","onClick","preventDefault","add","FieldValue","serverTimestamp","IconButton","onSelect","emoji","native","SidebarChat","dispatch","useDispatch","chatInfo","setChatInfo","Sidebar","searchInput","setSearchInput","chats","setChats","signOut","varrient","prompt","Imessage","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0c19828.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n\r\n    logout: state => {\r\n      state.user = null;\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { Avatar } from \"@material-ui/core\";\nimport React, { forwardRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"./features/userSlice\";\nimport \"./Message.css\";\nimport moment from \"moment\";\n\nconst Message = forwardRef(\n  (\n    { id, contents: { timestamp, displayName, uid, photo, email, message } },\n    ref\n  ) => {\n    const user = useSelector(selectUser);\n    const [messageInfo, serMessageInfo] = useState([]);\n\n\n\n    return (\n      <div\n        className={`message ${user.email === email && \"message__sender\"}`}\n        ref={ref}\n      >\n        {/* checks whether user email is equal to email that comes in\n     as props who inserted the message if so then sets classname to message__sender */}\n        <Avatar className=\"message__photo\" src={photo} />\n        <p>{message}</p>\n        <small>{moment(new Date(timestamp?.toDate())).fromNow()}</small>\n      </div>\n    );\n  }\n);\n\nexport default Message;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBOeHZMY-fXoeHd0YK2_wjZFYG6R0Naq9I\",\n  authDomain: \"imessage-clone-shoumikh.firebaseapp.com\",\n  databaseURL: \"https://imessage-clone-shoumikh.firebaseio.com\",\n  projectId: \"imessage-clone-shoumikh\",\n  storageBucket: \"imessage-clone-shoumikh.appspot.com\",\n  messagingSenderId: \"968495468055\",\n  appId: \"1:968495468055:web:eb8debfa0d17b543f5d652\",\n  measurementId: \"G-TP5XFZQL59\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const chatSlice = createSlice({\r\n  name: \"chat\",\r\n  initialState: {\r\n    chatId: null,\r\n    chatName: null,\r\n  },\r\n  reducers: {\r\n    setChat: (state, action) => {\r\n      state.chatId = action.payload.chatId;\r\n      state.chatName = action.payload.chatName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChat } = chatSlice.actions;\r\n\r\nexport const selectChatId = (state) => state.chat.chatId;\r\nexport const selectChatName = (state) => state.chat.chatName;\r\n\r\nexport default chatSlice.reducer;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./Chat.css\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { IconButton } from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport { useSelector } from \"react-redux\";\nimport { selectChatId, selectChatName } from \"./features/chatSlice\";\nimport firebase from \"firebase\";\nimport { selectUser } from \"./features/userSlice\";\nimport FlipMove from \"react-flip-move\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\n\nfunction Chat() {\n  const [input, setInput] = useState(); //takes what msg user enters\n  const [messages, setMessages] = useState([]); //local state array for messages\n  const chatName = useSelector(selectChatName); //seclects chat name from chat slice\n  const chatId = useSelector(selectChatId); //selects chat Id from chat slice\n  const user = useSelector(selectUser);\n  let [emojiSwitch, setEmojiSwitch] = useState(false);\n\n  //only triggers when chatId changes\n  //for setting msg to database and listen\n  //for any changes in the messages state\n  useEffect(() => {\n    //if there is a chatID\n    //it will go to chats db which is previously created\n    //grab the chatId from chats db\n    //as we click on the chat room chatId changes and useEffect\n    //loads based on chatId changes\n    //it will create db based on chat id\n    //create message db and order it by timestamp desc\n    //then on any chages inside the message db\n    //it will store it message array state\n    //the id of the msg in db and data\n    if (chatId) {\n      db.collection(\"chats\")\n        .doc(chatId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          setMessages(\n            snapshot.docs.map((doc) => ({\n              id: doc.id,\n              data: doc.data(),\n            }))\n          );\n        });\n    }\n  }, [chatId]);\n\n  //fires in whenever user hits enter after typing a message\n  const sendMessage = (e) => {\n    e.preventDefault(); //prevents from reloading the page\n    //firebase works\n    //tells to go to the collection of chats in firebase db\n    //then go to based on current chatId\n    //for that particular chatId goto the db of messages\n    //then add column\n    db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\n      //this provides the time of actual server where is no problem for different country time\n      timestamp: firebase.firestore?.FieldValue.serverTimestamp(),\n      message: input, //collected from input state\n      //all 4 below are colleted from user slice redux\n      uid: user.uid,\n      photo: user.photo,\n      displayName: user.displayName,\n      email: user.email,\n    });\n\n    setInput(\"\"); //set the input to nothing after sending message\n  };\n\n  //emoji api function\n  const addEmoji = (e) => {\n    let emoji = e.native;\n    setInput(input + emoji);\n  };\n\n  return (\n    <div className=\"chat\">\n      {/* for the chat header section */}\n      <div className=\"chat__header\">\n        <h4>\n          To: <span className=\"chat__channelName\">{chatName}</span>\n        </h4>\n        <strong>Details</strong>\n      </div>\n\n      {/* for chat messages section */}\n      <div className=\"chat__messages\">\n        <FlipMove className=\"chat__flipMove\">\n          {messages.map(({ id, data }) => (\n            <Message key={id} contents={data} />\n          ))}\n        </FlipMove>\n      </div>\n\n      {/* for the chat input section */}\n      <div className=\"chat__input\">\n        <form>\n          <input\n            value={input}\n            onChange={(e) => {\n              setInput(e.target.value);\n            }}\n            placeholder=\"iMessage\"\n            type=\"text\"\n          />\n          <button onClick={sendMessage}>Send Message</button>\n        </form>\n        <IconButton\n          onClick={() => {\n            setEmojiSwitch(!emojiSwitch);\n          }}\n        >\n          <InsertEmoticonIcon></InsertEmoticonIcon>\n        </IconButton>\n\n        {emojiSwitch ? (\n          <span className=\"chat__inputEmojiPicker\">\n            <Picker onSelect={addEmoji} />\n          </span>\n        ) : (\n          \"\"\n        )}\n\n        <IconButton>\n          <MicIcon className=\"chat__mic\" />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import { Avatar } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setChat } from \"./features/chatSlice\";\nimport db from \"./firebase\";\nimport \"./SidebarChat.css\";\nimport { selectChatId} from \"./features/chatSlice\";\n\nfunction SidebarChat({ id, chatName }) {\n  const dispatch = useDispatch(); //for dispatching action into the data layer\n  const [chatInfo, setChatInfo] = useState([]);\n  const chatId = useSelector(selectChatId);\n\n  useEffect(() => {\n    db.collection(\"chats\")\n      .doc(id)\n      .collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setChatInfo(snapshot.docs.map((doc) => doc.data()));\n      });\n  }, [id]);\n  return (\n    <div\n      onClick={() => {\n        dispatch(\n          setChat({\n            chatId: id,\n            chatName: chatName,\n          })\n        );\n      }}\n      className={`sidebarChat ${chatId === id && \"sidebarChat__active\"}`}\n    >\n      <Avatar src={chatInfo[0]?.photo} />\n      <div className=\"sidebarChat__info\">\n        <h3>{chatName}</h3>\n        <p>{chatInfo[0]?.message}</p>\n        <small>\n          {moment(new Date(chatInfo[0]?.timestamp?.toDate())).fromNow()}\n        </small>\n      </div>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import { Avatar, IconButton } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Sidebar.css\";\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\nimport SidebarChat from \"./SidebarChat\";\nimport db, { auth } from \"./firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"./features/userSlice\";\nimport { selectChatId, selectChatName, setChat } from \"./features/chatSlice\";\n\nfunction Sidebar() {\n  const [searchInput, setSearchInput] = useState();\n  const user = useSelector(selectUser); //importing the state\n  const [chats, setChats] = useState([]); //a local state array for collecting chats\n  const dispatch = useDispatch();\n\n  //as soon as the sidebar component loads\n  //creating a db of collection\n  //onSnapshot => realtime listener which gives us the\n  //snapshot of the database whenever anything changes\n  //whenever anything in the database changes as it is continiously listening\n  //we are changing setChat state\n  useEffect(() => {\n    db.collection(\"chats\").onSnapshot((snapshot) => {\n      setChats(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          data: doc.data(),\n        }))\n      );\n    });\n\n    //search functinality\n  }, []);\n\n  //hadles signout\n  const handleClick = () => {\n    auth.signOut(); //handles sign out\n  };\n\n  //adds chat name to the database and redux store\n  const addChat = () => {\n    const chatName = prompt(\"Please Enter chat name\");\n    if (chatName) {\n      db.collection(\"chats\").add({\n        chatName: chatName,\n      });\n    }\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar\n          onClick={handleClick}\n          src={user.photo}\n          className=\"sidebar__avatar\"\n        />\n\n        <div className=\"sidebar__input\">\n          <SearchIcon />\n          <input\n            placeholder=\"search\"\n            type=\"text\"\n            onChange={(e) => {\n              setSearchInput(e.target.value);\n            }}\n          />\n        </div>\n        <IconButton varrient=\"outlined\" className=\"sidebar__inputButton\">\n          <RateReviewOutlinedIcon onClick={addChat} />\n        </IconButton>\n      </div>\n      <div className=\"sidebar__chats\">\n        {/* for everty single chat in the chats array \n          one StatebarChat componenthas been called */}\n        {searchInput === chats?.data?.chatName\n          ? chats.map(({ id, data: { chatName } }) => (\n              <SidebarChat key={id} id={id} chatName={chatName} />\n            ))\n          : chats.map(({ id, data: { chatName } }) => (\n              <SidebarChat key={id} id={id} chatName={chatName} />\n            ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport Chat from \"./Chat\";\nimport \"./Imessage.css\";\nimport Sidebar from \"./Sidebar\";\n\nfunction Imessage() {\n  return (\n    <div className=\"imessage\">\n      <Sidebar />\n      <Chat />\n    </div>\n  );\n}\n\nexport default Imessage;\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./Login.css\";\nimport { auth, provider } from \"./firebase\";\n\nfunction Login() {\n  const signIn = () => {\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div>\n        <img\n          src=\"https://upload.wikimedia.org/wikipedia/commons/5/56/IMessage_logo_%28Apple_Inc.%29.png\"\n          alt=\"\"\n        /> \n        <h1>iMessage</h1>\n      </div>\n\n      <Button onClick={signIn}>Sign In</Button>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport { selectUser, login, logout } from \"./features/userSlice\";\r\nimport Imessage from \"./Imessage\";\r\nimport Login from \"./Login\";\r\nimport { auth } from \"./firebase\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser); //this will import user from userSlice\r\n  const dispatch = useDispatch(); //for dispathing the value in the data layer\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        //user is logged in\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        //user is logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, []);\r\n  return <div className=\"App\">{user ? <Imessage /> : <Login />}</div>;\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\nimport chatReducer from \"../features/chatSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}