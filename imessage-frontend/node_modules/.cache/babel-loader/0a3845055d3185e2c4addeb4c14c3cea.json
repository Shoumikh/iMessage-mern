{"ast":null,"code":"var _jsxFileName = \"/Users/shoumikh/Documents/React-projects/imessage-clone/src/Chat.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Chat.css\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { IconButton } from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport { useSelector } from \"react-redux\";\nimport { selectChatId, selectChatName } from \"./features/chatSlice\";\nimport firebase from \"firebase\";\nimport { selectUser } from \"./features/userSlice\";\nimport FlipMove from \"react-flip-move\";\n\nfunction Chat() {\n  const [input, setInput] = useState(); //takes what msg user enters\n\n  const [messages, setMessages] = useState([]); //local state array for messages\n\n  const chatName = useSelector(selectChatName); //seclects chat name from chat slice\n\n  const chatId = useSelector(selectChatId); //selects chat Id from chat slice\n\n  const user = useSelector(selectUser); //only triggers when chatId changes\n  //for setting msg to database and listen\n  //for any changes in the messages state\n\n  useEffect(() => {\n    //if there is a chatID\n    //it will go to chats db which is previously created\n    //grab the chatId from chats db\n    //as we click on the chat room chatId changes and useEffect\n    //loads based on chatId changes\n    //it will create db based on chat id\n    //create message db and order it by timestamp desc\n    //then on any chages inside the message db\n    //it will store it message array state\n    //the id of the msg in db and data\n    if (chatId) {\n      db.collection(\"chats\").doc(chatId).collection(\"messages\").orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => {\n        setMessages(snapshot.docs.map(doc => ({\n          id: doc.id,\n          data: doc.data()\n        })));\n      });\n    }\n  }, [chatId]); //fires in whenever user hits enter after typing a message\n\n  const sendMessage = e => {\n    e.preventDefault(); //prevents from reloading the page\n    //firebase works\n    //tells to go to the collection of chats in firebase db\n    //then go to based on current chatId\n    //for that particular chatId goto the db of messages\n    //then add column\n\n    db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\n      //this provides the time of actual server where is no problem for different country time\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      message: input,\n      //collected from input state\n      //all 4 below are colleted from user slice redux\n      uid: user.uid,\n      photo: user.photo,\n      displayName: user.displayName,\n      email: user.email\n    });\n    setInput(\"\"); //set the input to nothing after sending message\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"To: \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"chat__channelName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, chatName)), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Details\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FlipMove, {\n    className: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, messages.map(({\n    id,\n    data\n  }) => /*#__PURE__*/React.createElement(Message, {\n    key: id,\n    contents: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: input,\n    onChange: e => {\n      setInput(e.target.value);\n    },\n    placeholder: \"iMessage\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \"Send Message\")), /*#__PURE__*/React.createElement(IconButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MicIcon, {\n    className: \"chat__mic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/shoumikh/Documents/React-projects/imessage-clone/src/Chat.js"],"names":["React","useEffect","useState","MicIcon","IconButton","Message","db","useSelector","selectChatId","selectChatName","firebase","selectUser","FlipMove","Chat","input","setInput","messages","setMessages","chatName","chatId","user","collection","doc","orderBy","onSnapshot","snapshot","docs","map","id","data","sendMessage","e","preventDefault","add","timestamp","firestore","FieldValue","serverTimestamp","message","uid","photo","displayName","email","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Chat.css\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { IconButton } from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport { useSelector } from \"react-redux\";\nimport { selectChatId, selectChatName } from \"./features/chatSlice\";\nimport firebase from \"firebase\";\nimport { selectUser } from \"./features/userSlice\";\nimport FlipMove from \"react-flip-move\";\n\nfunction Chat() {\n  const [input, setInput] = useState(); //takes what msg user enters\n  const [messages, setMessages] = useState([]); //local state array for messages\n  const chatName = useSelector(selectChatName); //seclects chat name from chat slice\n  const chatId = useSelector(selectChatId); //selects chat Id from chat slice\n  const user = useSelector(selectUser);\n\n  //only triggers when chatId changes\n  //for setting msg to database and listen\n  //for any changes in the messages state\n  useEffect(() => {\n    //if there is a chatID\n    //it will go to chats db which is previously created\n    //grab the chatId from chats db\n    //as we click on the chat room chatId changes and useEffect\n    //loads based on chatId changes\n    //it will create db based on chat id\n    //create message db and order it by timestamp desc\n    //then on any chages inside the message db\n    //it will store it message array state\n    //the id of the msg in db and data\n    if (chatId) {\n      db.collection(\"chats\")\n        .doc(chatId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          setMessages(\n            snapshot.docs.map((doc) => ({\n              id: doc.id,\n              data: doc.data(),\n            }))\n          );\n        });\n    }\n  }, [chatId]);\n\n  //fires in whenever user hits enter after typing a message\n  const sendMessage = (e) => {\n    e.preventDefault(); //prevents from reloading the page\n    //firebase works\n    //tells to go to the collection of chats in firebase db\n    //then go to based on current chatId\n    //for that particular chatId goto the db of messages\n    //then add column\n    db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\n      //this provides the time of actual server where is no problem for different country time\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      message: input, //collected from input state\n      //all 4 below are colleted from user slice redux\n      uid: user.uid,\n      photo: user.photo,\n      displayName: user.displayName,\n      email: user.email,\n    });\n\n    setInput(\"\"); //set the input to nothing after sending message\n  };\n\n  return (\n    <div className=\"chat\">\n      {/* for the chat header section */}\n      <div className=\"chat__header\">\n        <h4>\n          To: <span className=\"chat__channelName\">{chatName}</span>\n        </h4>\n        <strong>Details</strong>\n      </div>\n\n      {/* for chat messages section */}\n      <div className=\"chat__messages\">\n        <FlipMove className=\"chat\">\n          {messages.map(({ id, data }) => (\n            <Message key={id} contents={data} />\n          ))}\n        </FlipMove>\n      </div>\n\n      {/* for the chat input section */}\n      <div className=\"chat__input\">\n        <form>\n          <input\n            value={input}\n            onChange={(e) => {\n              setInput(e.target.value);\n            }}\n            placeholder=\"iMessage\"\n            type=\"text\"\n          />\n          <button onClick={sendMessage}>Send Message</button>\n        </form>\n        <IconButton>\n          <MicIcon className=\"chat__mic\" />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}