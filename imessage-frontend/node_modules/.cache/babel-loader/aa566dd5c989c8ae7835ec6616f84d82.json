{"ast":null,"code":"import _slicedToArray from\"/Users/shoumikh/Documents/React-projects/imessage-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import\"./Chat.css\";import MicIcon from\"@material-ui/icons/Mic\";import{IconButton}from\"@material-ui/core\";import Message from\"./Message\";import db from\"./firebase\";import{useSelector}from\"react-redux\";import{selectChatId,selectChatName}from\"./features/chatSlice\";import firebase from\"firebase\";import{selectUser}from\"./features/userSlice\";import FlipMove from\"react-flip-move\";function Chat(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),input=_useState2[0],setInput=_useState2[1];//takes what msg user enters\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),messages=_useState4[0],setMessages=_useState4[1];//local state array for messages\nvar chatName=useSelector(selectChatName);//seclects chat name from chat slice\nvar chatId=useSelector(selectChatId);//selects chat Id from chat slice\nvar user=useSelector(selectUser);//only triggers when chatId changes\n//for setting msg to database and listen\n//for any changes in the messages state\nuseEffect(function(){//if there is a chatID\n//it will go to chats db which is previously created\n//grab the chatId from chats db\n//as we click on the chat room chatId changes and useEffect\n//loads based on chatId changes\n//it will create db based on chat id\n//create message db and order it by timestamp desc\n//then on any chages inside the message db\n//it will store it message array state\n//the id of the msg in db and data\nif(chatId){db.collection(\"chats\").doc(chatId).collection(\"messages\").orderBy(\"timestamp\",\"desc\").onSnapshot(function(snapshot){setMessages(snapshot.docs.map(function(doc){return{id:doc.id,data:doc.data()};}));});}},[chatId]);//fires in whenever user hits enter after typing a message\nvar sendMessage=function sendMessage(e){e.preventDefault();//prevents from reloading the page\n//firebase works\n//tells to go to the collection of chats in firebase db\n//then go to based on current chatId\n//for that particular chatId goto the db of messages\n//then add column\ndb.collection(\"chats\").doc(chatId).collection(\"messages\").add({//this provides the time of actual server where is no problem for different country time\ntimestamp:firebase.firestore.FieldValue.serverTimestamp(),message:input,//collected from input state\n//all 4 below are colleted from user slice redux\nuid:user.uid,photo:user.photo,displayName:user.displayName,email:user.email});setInput(\"\");//set the input to nothing after sending message\n};return/*#__PURE__*/React.createElement(\"div\",{className:\"chat\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat__header\"},/*#__PURE__*/React.createElement(\"h4\",null,\"To: \",/*#__PURE__*/React.createElement(\"span\",{className:\"chat__channelName\"},chatName)),/*#__PURE__*/React.createElement(\"strong\",null,\"Details\")),/*#__PURE__*/React.createElement(\"div\",{className:\"chat__messages\"},/*#__PURE__*/React.createElement(FlipMove,{className:\"chat__flipMove\"},messages.map(function(_ref){var id=_ref.id,data=_ref.data;return/*#__PURE__*/React.createElement(Message,{key:id,contents:data});}))),/*#__PURE__*/React.createElement(\"div\",{className:\"chat__input\"},/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(\"input\",{value:input,onChange:function onChange(e){setInput(e.target.value);},placeholder:\"iMessage\",type:\"text\"}),/*#__PURE__*/React.createElement(\"button\",{onClick:sendMessage},\"Send Message\")),/*#__PURE__*/React.createElement(IconButton,null,/*#__PURE__*/React.createElement(MicIcon,{className:\"chat__mic\"}))));}export default Chat;","map":{"version":3,"sources":["/Users/shoumikh/Documents/React-projects/imessage-clone/src/Chat.js"],"names":["React","useEffect","useState","MicIcon","IconButton","Message","db","useSelector","selectChatId","selectChatName","firebase","selectUser","FlipMove","Chat","input","setInput","messages","setMessages","chatName","chatId","user","collection","doc","orderBy","onSnapshot","snapshot","docs","map","id","data","sendMessage","e","preventDefault","add","timestamp","firestore","FieldValue","serverTimestamp","message","uid","photo","displayName","email","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Chat.css\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { IconButton } from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport { useSelector } from \"react-redux\";\nimport { selectChatId, selectChatName } from \"./features/chatSlice\";\nimport firebase from \"firebase\";\nimport { selectUser } from \"./features/userSlice\";\nimport FlipMove from \"react-flip-move\";\n\nfunction Chat() {\n  const [input, setInput] = useState(); //takes what msg user enters\n  const [messages, setMessages] = useState([]); //local state array for messages\n  const chatName = useSelector(selectChatName); //seclects chat name from chat slice\n  const chatId = useSelector(selectChatId); //selects chat Id from chat slice\n  const user = useSelector(selectUser);\n\n  //only triggers when chatId changes\n  //for setting msg to database and listen\n  //for any changes in the messages state\n  useEffect(() => {\n    //if there is a chatID\n    //it will go to chats db which is previously created\n    //grab the chatId from chats db\n    //as we click on the chat room chatId changes and useEffect\n    //loads based on chatId changes\n    //it will create db based on chat id\n    //create message db and order it by timestamp desc\n    //then on any chages inside the message db\n    //it will store it message array state\n    //the id of the msg in db and data\n    if (chatId) {\n      db.collection(\"chats\")\n        .doc(chatId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) => {\n          setMessages(\n            snapshot.docs.map((doc) => ({\n              id: doc.id,\n              data: doc.data(),\n            }))\n          );\n        });\n    }\n  }, [chatId]);\n\n  //fires in whenever user hits enter after typing a message\n  const sendMessage = (e) => {\n    e.preventDefault(); //prevents from reloading the page\n    //firebase works\n    //tells to go to the collection of chats in firebase db\n    //then go to based on current chatId\n    //for that particular chatId goto the db of messages\n    //then add column\n    db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\n      //this provides the time of actual server where is no problem for different country time\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      message: input, //collected from input state\n      //all 4 below are colleted from user slice redux\n      uid: user.uid,\n      photo: user.photo,\n      displayName: user.displayName,\n      email: user.email,\n    });\n\n    setInput(\"\"); //set the input to nothing after sending message\n  };\n\n  return (\n    <div className=\"chat\">\n      {/* for the chat header section */}\n      <div className=\"chat__header\">\n        <h4>\n          To: <span className=\"chat__channelName\">{chatName}</span>\n        </h4>\n        <strong>Details</strong>\n      </div>\n\n      {/* for chat messages section */}\n      <div className=\"chat__messages\">\n        <FlipMove className=\"chat__flipMove\">\n          {messages.map(({ id, data }) => (\n            <Message key={id} contents={data} />\n          ))}\n        </FlipMove>\n      </div>\n\n      {/* for the chat input section */}\n      <div className=\"chat__input\">\n        <form>\n          <input\n            value={input}\n            onChange={(e) => {\n              setInput(e.target.value);\n            }}\n            placeholder=\"iMessage\"\n            type=\"text\"\n          />\n          <button onClick={sendMessage}>Send Message</button>\n        </form>\n        <IconButton>\n          <MicIcon className=\"chat__mic\" />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}